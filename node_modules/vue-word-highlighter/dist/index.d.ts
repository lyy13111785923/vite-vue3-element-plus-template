import * as vue_demi from 'vue-demi';
import { PropType, VNode } from 'vue-demi';

declare const _default: vue_demi.DefineComponent<{
    query: {
        type: (StringConstructor | RegExpConstructor)[];
        required: true;
        default: string;
    };
    caseSensitive: {
        type: BooleanConstructor;
        default: boolean;
    };
    diacriticsSensitive: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitBySpace: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightClass: {
        type: PropType<string | Record<string, boolean> | string[]>;
        default: string;
    };
    highlightStyle: {
        type: PropType<string | Record<string, boolean> | string[]>;
        default: string;
    };
    highlightTag: {
        type: StringConstructor;
        default: string;
    };
    wrapperTag: {
        type: StringConstructor;
        default: string;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        default: string;
    };
    textToHighlight: {
        type: StringConstructor;
        default: string;
    };
    htmlToHighlight: {
        type: StringConstructor;
        default: string;
    };
}, () => VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}> | VNode<vue_demi.RendererNode, vue_demi.RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, vue_demi.ComponentOptionsMixin, vue_demi.ComponentOptionsMixin, "matches"[], "matches", vue_demi.VNodeProps & vue_demi.AllowedComponentProps & vue_demi.ComponentCustomProps, Readonly<vue_demi.ExtractPropTypes<{
    query: {
        type: (StringConstructor | RegExpConstructor)[];
        required: true;
        default: string;
    };
    caseSensitive: {
        type: BooleanConstructor;
        default: boolean;
    };
    diacriticsSensitive: {
        type: BooleanConstructor;
        default: boolean;
    };
    splitBySpace: {
        type: BooleanConstructor;
        default: boolean;
    };
    highlightClass: {
        type: PropType<string | Record<string, boolean> | string[]>;
        default: string;
    };
    highlightStyle: {
        type: PropType<string | Record<string, boolean> | string[]>;
        default: string;
    };
    highlightTag: {
        type: StringConstructor;
        default: string;
    };
    wrapperTag: {
        type: StringConstructor;
        default: string;
    };
    wrapperClass: {
        type: (StringConstructor | ObjectConstructor | ArrayConstructor)[];
        default: string;
    };
    textToHighlight: {
        type: StringConstructor;
        default: string;
    };
    htmlToHighlight: {
        type: StringConstructor;
        default: string;
    };
}>> & {
    onMatches?: ((...args: any[]) => any) | undefined;
}, {
    query: string | RegExp;
    caseSensitive: boolean;
    diacriticsSensitive: boolean;
    splitBySpace: boolean;
    highlightClass: string | Record<string, boolean> | string[];
    highlightStyle: string | Record<string, boolean> | string[];
    highlightTag: string;
    wrapperTag: string;
    wrapperClass: string | unknown[] | Record<string, any>;
    textToHighlight: string;
    htmlToHighlight: string;
}>;

export { _default as default };
