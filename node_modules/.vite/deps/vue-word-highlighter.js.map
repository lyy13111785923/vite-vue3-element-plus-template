{
  "version": 3,
  "sources": ["../../diacritics/index.js", "../../vue-word-highlighter/node_modules/vue-demi/lib/index.mjs", "../../vue-word-highlighter/src/utils/getRowWordList.ts", "../../vue-word-highlighter/src/utils/createHighlightWordChunk.ts", "../../vue-word-highlighter/src/utils/extractDefaultSlotsText.ts", "../../vue-word-highlighter/src/utils/extractMatchesStrings.ts", "../../vue-word-highlighter/src/components/index.ts"],
  "sourcesContent": ["exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n", "import * as Vue from 'vue'\n\nvar isVue2 = false\nvar isVue3 = true\nvar Vue2 = undefined\n\nfunction install() {}\n\nexport function set(target, key, val) {\n  if (Array.isArray(target)) {\n    target.length = Math.max(target.length, key)\n    target.splice(key, 1, val)\n    return val\n  }\n  target[key] = val\n  return val\n}\n\nexport function del(target, key) {\n  if (Array.isArray(target)) {\n    target.splice(key, 1)\n    return\n  }\n  delete target[key]\n}\n\nexport * from 'vue'\nexport {\n  Vue,\n  Vue2,\n  isVue2,\n  isVue3,\n  install,\n}\n", "export const getRowWordList = (\n  word: string,\n  splittedWordList: string[]\n): string[] => {\n  const rowWordList: string[] = [];\n  splittedWordList.forEach((splittedWord) => {\n    const start = rowWordList.join(\"\").length;\n    const end = start + splittedWord.length;\n    rowWordList.push(word.slice(start, end));\n  });\n\n  return rowWordList;\n};\n", "import { h } from \"vue-demi\";\nimport diacritics from \"diacritics\";\nimport { getRowWordList } from \"./getRowWordList\";\n\nconst escapeRegExp = (text: string) => {\n  return text.replace(/[-\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n};\n\nconst createHighlightPattern = (options: {\n  query: string | RegExp;\n  splitBySpace: boolean;\n  caseSensitive: boolean;\n}): RegExp => {\n  let pattern: string;\n\n  if (options.query instanceof RegExp) {\n    return new RegExp(\n      String.raw`(${options.query.source})`,\n      `g${options.caseSensitive ? \"\" : \"i\"}`\n    );\n  }\n\n  if (options.splitBySpace) {\n    const normalizeQuery = options.query.trim().replace(/\\s+/g, \" \");\n    pattern = String.raw`(${normalizeQuery\n      .split(/\\s/)\n      .map(escapeRegExp)\n      .join(\"|\")})`;\n  } else {\n    pattern = String.raw`(${escapeRegExp(options.query)})`;\n  }\n\n  return new RegExp(\n    String.raw`${pattern}`,\n    `g${options.caseSensitive ? \"\" : \"i\"}`\n  );\n};\n\nexport const createHighlightWordChunk = (\n  targetText: string,\n  options: {\n    query: string | RegExp;\n    splitBySpace: boolean;\n    caseSensitive: boolean;\n    diacriticsSensitive: boolean;\n    highlightTag: string;\n    highlightClass: Record<string, boolean> | string | string[];\n    highlightStyle: Record<string, boolean> | string | string[];\n  },\n  isHtml = false\n) => {\n  if (\n    !options.query ||\n    (options.query instanceof String && !options.query.trim())\n  ) {\n    return targetText;\n  }\n\n  let innerTargetText = targetText;\n  let innerQuery = options.query;\n  let hasDiacritics = false;\n\n  if (!options.diacriticsSensitive) {\n    innerTargetText = diacritics.remove(innerTargetText);\n    innerQuery =\n      options.query instanceof RegExp\n        ? options.query\n        : diacritics.remove(options.query);\n    hasDiacritics = innerTargetText !== targetText;\n  }\n\n  const pattern = createHighlightPattern({\n    query: innerQuery,\n    splitBySpace: options.splitBySpace,\n    caseSensitive: options.caseSensitive,\n  });\n\n  const wordList = innerTargetText.split(pattern);\n\n  // Make a list restoring the original string because diacritics may have been converted\n  const restoredWordList = hasDiacritics\n    ? getRowWordList(targetText, wordList)\n    : wordList;\n\n  if (isHtml) {\n    return wordList\n      .map((w: string, i: number) => {\n        if (pattern.test(w)) {\n          // FIXME: highlightClass and highlightStyle are only supported as string\n          const classLiteral = options.highlightClass\n            ? ` class=\"${options.highlightClass}\"`\n            : \"\";\n          const styleLiteral = options.highlightStyle\n            ? ` style=\"${options.highlightStyle}\"`\n            : \"\";\n          return `<${options.highlightTag}${classLiteral}${styleLiteral}>${restoredWordList[i]}</${options.highlightTag}>`;\n        }\n        return restoredWordList[i];\n      })\n      .join(\"\");\n  } else {\n    return wordList.map((w: string, i: number) => {\n      if (pattern.test(w)) {\n        return h(\n          options.highlightTag,\n          {\n            class: options.highlightClass,\n            style: options.highlightStyle,\n          },\n          restoredWordList[i]\n        );\n      }\n      return restoredWordList[i];\n    });\n  }\n};\n", "import { isVue3 } from \"vue-demi\";\n\ntype SlotItem = { children: string | SlotItem[]; text: string };\ntype Slots = { default?: () => SlotItem[] };\n\nconst getSlotText = (slot: SlotItem): string => {\n  if (!Array.isArray(slot.children)) {\n    return slot.children ?? \"\";\n  }\n  return slot.children.map(getSlotText).join(\"\");\n};\n\nexport const extractDefaultSlotsText = (slots?: Slots): string => {\n  if (slots && slots.default) {\n    const defaultSlot = slots.default();\n    let slotText;\n    if (isVue3) {\n      slotText = getSlotText(defaultSlot[0]);\n    } else {\n      // vue 2 slots text is in vnode's text attribute\n      slotText = defaultSlot[0].text;\n    }\n    if (typeof slotText === \"string\") {\n      return slotText;\n    } else {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn(\"Slots should be text only\");\n      }\n      return \"\";\n    }\n  }\n  return \"\";\n};\n", "import { isVue3 } from \"vue-demi\";\n\nexport const extractMatchesStrings = (\n  wordChunk: string | (string | unknown)[]\n): string[] => {\n  if (typeof wordChunk === \"string\") {\n    return [];\n  }\n  return wordChunk\n    .filter((w) => typeof w !== \"string\")\n    .map((v) => {\n      if (typeof v === \"string\") {\n        return v;\n      }\n      if (isVue3) {\n        return (v as { children: string }).children;\n      }\n      return (v as { children: { text: string }[] }).children[0].text;\n    });\n};\n", "import { defineComponent, h, install, PropType, isVue3, VNode } from \"vue-demi\";\nimport { createHighlightWordChunk } from \"../utils/createHighlightWordChunk\";\nimport { extractDefaultSlotsText } from \"../utils/extractDefaultSlotsText\";\nimport { extractMatchesStrings } from \"../utils/extractMatchesStrings\";\n\ninstall();\n\nexport default defineComponent({\n  name: \"VueWordHighlighter\",\n  props: {\n    query: {\n      type: [String, RegExp],\n      required: true,\n      default: \"\",\n    },\n    caseSensitive: {\n      type: Boolean,\n      default: false,\n    },\n    diacriticsSensitive: {\n      type: Boolean,\n      default: false,\n    },\n    splitBySpace: {\n      type: Boolean,\n      default: false,\n    },\n    highlightClass: {\n      type: [Object, String, Array] as PropType<\n        Record<string, boolean> | string | string[]\n      >,\n      default: \"\",\n    },\n    highlightStyle: {\n      type: [Object, String, Array] as PropType<\n        Record<string, boolean> | string | string[]\n      >,\n      default: \"\",\n    },\n    highlightTag: {\n      type: String,\n      default: \"mark\",\n    },\n    wrapperTag: {\n      type: String,\n      default: \"span\",\n    },\n    wrapperClass: {\n      type: [Object, String, Array],\n      default: \"\",\n    },\n    textToHighlight: {\n      type: String,\n      default: \"\",\n    },\n    htmlToHighlight: {\n      type: String,\n      default: \"\",\n    },\n  },\n  emits: [\"matches\"],\n  setup(props, ctx) {\n    return () => {\n      // --------------------------\n      // highlight html\n      // --------------------------\n      // preferred htmlToHighlight if provided\n      if (props.htmlToHighlight) {\n        if (!isVue3) {\n          throw new Error(\"htmlToHighlight prop is only supported in Vue 3\");\n        }\n        const HTML_TAG_PATTERN = `(<(?:\"[^\"]*\"['\"]*|'[^']*'['\"]*|[^'\">])+>)`;\n        const words: string[] = props.htmlToHighlight.split(\n          new RegExp(HTML_TAG_PATTERN, \"gs\")\n        );\n        const highlightedHtml = words\n          .map((word, i) => {\n            // Skip if the word is inside a script tag\n            if (new RegExp(HTML_TAG_PATTERN).test(word)) {\n              return word;\n            }\n            // Skip if the word is inside a script tag\n            if (i > 0 && words[i - 1].startsWith(\"<script\")) {\n              return word;\n            }\n\n            return createHighlightWordChunk(\n              word,\n              {\n                query: props.query,\n                splitBySpace: props.splitBySpace,\n                caseSensitive: props.caseSensitive,\n                diacriticsSensitive: props.diacriticsSensitive,\n                highlightTag: props.highlightTag,\n                highlightClass: props.highlightClass,\n                highlightStyle: props.highlightStyle,\n              },\n              true\n            );\n          })\n          .join(\"\");\n\n        return h(props.wrapperTag, {\n          class: props.wrapperClass,\n          innerHTML: highlightedHtml,\n        });\n      }\n\n      // --------------------------\n      // highlight props text\n      // --------------------------\n      if (props.textToHighlight) {\n        const highlightWordChunk = createHighlightWordChunk(\n          props.textToHighlight,\n          {\n            query: props.query,\n            splitBySpace: props.splitBySpace,\n            caseSensitive: props.caseSensitive,\n            diacriticsSensitive: props.diacriticsSensitive,\n            highlightTag: props.highlightTag,\n            highlightClass: props.highlightClass,\n            highlightStyle: props.highlightStyle,\n          }\n        );\n\n        ctx.emit(\"matches\", extractMatchesStrings(highlightWordChunk));\n\n        return h(\n          props.wrapperTag,\n          {\n            class: props.wrapperClass,\n          },\n          highlightWordChunk\n        );\n      }\n\n      // --------------------------\n      // highlight slots\n      // --------------------------\n      // TODO: refactor this\n      if (isVue3) {\n        // only supported nested slots in Vue 3\n        if (ctx.slots && ctx.slots.default) {\n          const createHighlightedNode = (node: VNode): VNode => {\n            // if node have a text, it's a text node\n            if (typeof node.children == \"string\") {\n              const highlightWordChunk = createHighlightWordChunk(\n                node.children,\n                {\n                  query: props.query,\n                  splitBySpace: props.splitBySpace,\n                  caseSensitive: props.caseSensitive,\n                  diacriticsSensitive: props.diacriticsSensitive,\n                  highlightTag: props.highlightTag,\n                  highlightClass: props.highlightClass,\n                  highlightStyle: props.highlightStyle,\n                }\n              );\n\n              const matchesStrings = extractMatchesStrings(highlightWordChunk);\n              ctx.emit(\"matches\", matchesStrings);\n\n              if (matchesStrings.length === 0) {\n                return node;\n              }\n              // if node is not a string, it's a html tag\n              if (typeof node.type == \"string\") {\n                return h(\n                  node.type,\n                  {\n                    ...node.props,\n                  },\n                  [\n                    h(\n                      props.wrapperTag,\n                      {\n                        class: props.wrapperClass,\n                      },\n                      highlightWordChunk\n                    ),\n                  ]\n                );\n              } else {\n                return h(\n                  props.wrapperTag,\n                  {\n                    class: props.wrapperClass,\n                  },\n                  highlightWordChunk\n                );\n              }\n            } else {\n              return h(\n                node.type as string,\n                {\n                  ...node.props,\n                },\n                Array.isArray(node.children)\n                  ? (node.children as VNode[]).map((c: VNode) =>\n                      createHighlightedNode(c)\n                    )\n                  : []\n              );\n            }\n          };\n          const nodes = ctx.slots.default();\n          return Array.isArray(nodes)\n            ? nodes.map((n: VNode) => createHighlightedNode(n))\n            : nodes;\n        }\n      } else {\n        // not support nested slots in Vue 2\n        const targetText = extractDefaultSlotsText(ctx.slots);\n\n        const highlightWordChunk = createHighlightWordChunk(targetText, {\n          query: props.query,\n          splitBySpace: props.splitBySpace,\n          caseSensitive: props.caseSensitive,\n          diacriticsSensitive: props.diacriticsSensitive,\n          highlightTag: props.highlightTag,\n          highlightClass: props.highlightClass,\n          highlightStyle: props.highlightStyle,\n        });\n\n        ctx.emit(\"matches\", extractMatchesStrings(highlightWordChunk));\n\n        return h(\n          props.wrapperTag,\n          {\n            class: props.wrapperClass,\n          },\n          highlightWordChunk\n        );\n      }\n    };\n  },\n});\n"],
  "mappings": "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",
  "names": ["escapeRegExp", "text", "replace", "createHighlightWordChunk", "targetText", "options", "isHtml", "query", "String", "trim", "innerTargetText", "innerQuery", "hasDiacritics", "diacriticsSensitive", "diacritics", "remove", "RegExp", "pattern", "raw", "source", "caseSensitive", "splitBySpace", "normalizeQuery", "split", "map", "join", "wordList", "restoredWordList", "word", "splittedWordList", "rowWordList", "forEach", "splittedWord", "start", "length", "end", "push", "slice", "w", "i", "test", "classLiteral", "highlightClass", "styleLiteral", "highlightStyle", "highlightTag", "h", "class", "style", "getSlotText", "slot", "Array", "isArray", "children", "extractMatchesStrings", "wordChunk", "filter", "v", "isVue3", "install", "VueWordHighlighter", "defineComponent", "name", "props", "type", "required", "default", "Boolean", "Object", "wrapperTag", "wrapperClass", "textToHighlight", "htmlToHighlight", "emits", "setup", "ctx", "Error", "HTML_TAG_PATTERN", "words", "highlightedHtml", "startsWith", "innerHTML", "highlightWordChunk", "emit", "slots", "defaultSlot", "slotText", "console", "warn", "createHighlightedNode", "node", "matchesStrings", "c", "nodes", "n"]
}
